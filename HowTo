

























     """Handles GET requests"""
     """Handles GET requests"""
     resp.content_type = "application/json"
     resp.content_type = "text/html"
     resp.status = falcon.HTTP_200  # This is the default status
     resp.status = falcon.HTTP_200  # This is the default status
     resp.stream = open(os.path.join("static", "index.html"))
     resp.stream = open(os.path.join("static", "index.json"))
    def on_get(self, req, resp):
    def on_get(self, req, resp):
 gunicorn testApp2:app
# Falcon follows the REST architectural style, meaning (among
# falcon.API instances are callable WSGI apps
# other things) that you think in terms of resources and state
# Resources are represented by long-lived class instances
# things will handle all requests to the '/things' URL path
# thire'll be some JSON. Route for the data.
# transitions, which map to HTTP verbs.
#CRUD create,read,update,delete
#Either a file-like object with a read() method that takes an optional size argument and returns a block of bytes, or an iterable object, representing response content, and yielding blocks as byte strings. Falcon will use wsgi.file_wrapper, if provided by the WSGI server, in order to efficiently serve file-like objects.
#Either a file-like object with a read() method that takes an optional size argument and returns a block of bytes, or an iterable object, representing response content, and yielding blocks as byte strings. Falcon will use wsgi.file_wrapper, if provided by the WSGI server, in order to efficiently serve file-like objects.
#HTTP status line (e.g., ‘200 OK’). Falcon requires the full status line, not just the code (e.g., 200). This design makes the framework more efficient because it does not have to do any kind of conversion or lookup when composing the WSGI response.
#HTTP status line (e.g., ‘200 OK’). Falcon requires the full status line, not just the code (e.g., 200). This design makes the framework more efficient because it does not have to do any kind of conversion or lookup when composing the WSGI response.
#Value of the Content-Type header, or None if the header is missing.
#Value of the Content-Type header, or None if the header is missing.
$ uwsgi --http :8000 --wsgi-file Example1.py --callable wsgi_app
---------
------------------
--------------------
. testApp/bin/activate
1. Make venv:  virtualenv testApp -p /usr/bin/python3
2. Activate venv Теперь включите виртуальную среду:
3. Falcon и Gunicorn
4. Gunicorn:
app = falcon.API()
app.add_route('/', testApp)
app.add_route('/info', jsInfo)
class jsInfo(object):
class testApp(object):
Falcon можно установить двумя способами. Вы можете установить бинарный файл Falcon с помощью команды pip install falcon. Но в сочетании с Cython фреймворк Falcon может увеличить свою производительность. Чтобы установить Cython, сообщить об этом Falcon и собрать пакет с помощью компилятора С, введите:
from wsgiref import simple_server
gunicorn testApp2:app
http://falcon.readthedocs.io/en/stable/user/quickstart.html
http://www.giantflyingsaucer.com/blog/?p=4342
https://www.digitalocean.com/community/tutorials/how-to-deploy-falcon-web-applications-with-gunicorn-and-nginx-on-ubuntu-16-04
import falcon
import json
import mimetypes
import os
Install virtualenv: sudo apt-get install virtualenv
jsInfo = jsInfo()
pip install --no-binary :all: falcon
pip install cython #just for falcon-app executing
pip install gunicorn
Python 3.5.
sudo apt-get install build-essential python3-dev
testApp = testApp()
testApp2.py
Приложение Falcon нужно изолировать от других файлов Python. Для этого используется виртуальная среда (virtual environment). Чтобы создать такую среду, нужно установить инструмент virtualenv.
Пример, который изначально отдавал статику
Разные способы записи для приложений
Теперь нужно установить пакеты falcon и Gunicorn. Все это можно установить с помощью пакетного менеджера pip.
Это создаст локальную копию Python и pip в каталоге venv. Флаг –p позволяет указать версию Python, которую нужно использовать в среде.


---------------------------------------------------
Содержимое конф.файла нгинкса:
server {
    listen 80;
    server_name 127.0.0.1;
    
    location /data{
        include proxy_params;
        proxy_pass http://127.0.0.1:8000/;
        proxy_redirect off;
        charset koi8-r;
    }

    location /{
        root /home/osinpaul/dev/test/static;
        index index index.html index.htm;
    }

    location ~ ^/(static|media)/{
    root /home/osinpaul/dev/test/static;
    expires max;
    }

    access_log /home/osinpaul/dev/test/access.log;
    error_log /home/osinpaul/dev/test/error.log;
}
